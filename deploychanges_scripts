import mysql.connector
import logging

# Configure logging for debugging and tracking
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def deploy_changes(host, user, password, database, sql_file):
    """
    Deploy database schema changes from an SQL file.

    Args:
        host (str): MySQL host address (e.g., 'localhost')
        user (str): MySQL username
        password (str): MySQL password
        database (str): Database name
        sql_file (str): Path to SQL file with changes

    Raises:
        mysql.connector.Error: If database operations fail
        FileNotFoundError: If SQL file is missing
        Exception: For other unexpected errors
    """
    conn = None
    cursor = None
    try:
        # Step 1: Connect to database
        conn = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=database
        )
        cursor = conn.cursor()
        logger.info(f"Connected to database: {database}")

        # Step 2: Read SQL file
        with open(sql_file, 'r') as f:
            sql_commands = f.read().split(';')
            sql_commands = [cmd.strip() for cmd in sql_commands if cmd.strip()]
        logger.info(f"Read {len(sql_commands)} SQL commands from {sql_file}")

        # Step 3: Execute SQL commands in a transaction
        for command in sql_commands:
            logger.info(f"Executing: {command}")
            cursor.execute(command)

        # Step 4: Commit changes
        conn.commit()
        logger.info("Database changes deployed successfully")

    except mysql.connector.Error as e:
        logger.error(f"Database error: {e}")
        if conn:
            conn.rollback()
        raise
    except FileNotFoundError:
        logger.error(f"SQL file not found: {sql_file}")
        raise
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        if conn:
            conn.rollback()
        raise
    finally:
        # Step 5: Clean up resources
        if cursor:
            cursor.close()
        if conn and conn.is_connected():
            conn.close()
            logger.info("Database connection closed")

if __name__ == "__main__":
    # Example configuration (replace with actual credentials)
    config = {
        "host": "localhost",
        "user": "root",
        "password": "your_password",
        "database": "mydb",
        "sql_file": "changes.sql"
    }

    try:
        deploy_changes(**config)
    except Exception as e:
        logger.error(f"Deployment failed: {e}")
